(defun mostrar-menu ()
  (format t "Selecciona una figura geometrica:~%")
  (format t "1. Cuadrado~%")
  (format t "2. Rectangulo~%")
  (format t "3. Triángulo~%")
  (format t "4. Circulo~%")
  (format t "5. Pentagono~%")
  (format t "6. Hexagono~%")
  (format t "7. Trapecio~%")
  (format t "8. Elipse~%")
  (format t "9. Paralelogramo~%")
  (format t "10. Rombo~%"))

(defun leer-opcion ()
  (format t "Elige una opcion (1-10): ")
  (read))

(defun cuadrado ()
  (format t "Introduce la longitud del lado del cuadrado: ")
  (let ((lado (read)))
    (let ((area (* lado lado))
          (perimetro (* 4 lado)))
      (format t "Area del cuadrado: ~a~%" area)
      (format t "Perimetro del cuadrado: ~a~%" perimetro))))

(defun rectangulo ()
  (format t "Introduce la longitud del largo: ")
  (let ((largo (read)))
    (format t "Introduce la longitud del ancho: ")
    (let ((ancho (read)))
      (let ((area (* largo ancho))
            (perimetro (* 2 (+ largo ancho))))
        (format t "Area del rectángulo: ~a~%" area)
        (format t "Perimetro del rectángulo: ~a~%" perimetro)))))

(defun triangulo ()
  (format t "Introduce la base del triángulo: ")
  (let ((base (read)))
    (format t "Introduce la altura del triángulo: ")
    (let ((altura (read)))
      (let ((area (/ (* base altura) 2)))
        (format t "Area del triángulo: ~a~%" area)))))

(defun circulo ()
  (format t "Introduce el radio del círculo: ")
  (let ((radio (read)))
    (let ((area (* pi radio radio))
          (perimetro (* 2 pi radio)))
      (format t "Area del círculo: ~a~%" area)
      (format t "Perimetro del círculo: ~a~%" perimetro))))

(defun pentagono ()
  (format t "Introduce la longitud de un lado del pentágono: ")
  (let ((lado (read)))
    (format t "Introduce la apotema del pentágono: ")
    (let ((apotema (read)))
      (let ((perimetro (* 5 lado))
            (area (/ (* perimetro apotema) 2)))
        (format t "Area del pentágono: ~a~%" area)
        (format t "Perimetro del pentágono: ~a~%" perimetro)))))

(defun hexagono ()
  (format t "Introduce la longitud de un lado del hexágono: ")
  (let ((lado (read)))
    (let ((perimetro (* 6 lado))
          (area (* 3 (/ (sqrt 3) 2) lado lado)))
      (format t "Area del hexágono: ~a~%" area)
      (format t "Perimetro del hexágono: ~a~%" perimetro))))

(defun trapecio ()
  (format t "Introduce la base mayor del trapecio: ")
  (let ((base-mayor (read)))
    (format t "Introduce la base menor del trapecio: ")
    (let ((base-menor (read)))
      (format t "Introduce la altura del trapecio: ")
      (let ((altura (read)))
        (let ((area (/ (* (+ base-mayor base-menor) altura) 2)))
          (format t "Area del trapecio: ~a~%" area))))))

(defun elipse ()
  (format t "Introduce el radio mayor de la elipse: ")
  (let ((radio-mayor (read)))
    (format t "Introduce el radio menor de la elipse: ")
    (let ((radio-menor (read)))
      (let ((area (* pi radio-mayor radio-menor)))
        (format t "Area de la elipse: ~a~%" area)))))

(defun paralelogramo ()
  (format t "Introduce la base del paralelogramo: ")
  (let ((base (read)))
    (format t "Introduce la altura del paralelogramo: ")
    (let ((altura (read)))
      (let ((area (* base altura))
            (perimetro (* 2 (+ base altura))))
        (format t "Area del paralelogramo: ~a~%" area)
        (format t "Perimetro del paralelogramo: ~a~%" perimetro)))))

(defun rombo ()
  (format t "Introduce la diagonal mayor del rombo: ")
  (let ((diagonal-mayor (read)))
    (format t "Introduce la diagonal menor del rombo: ")
    (let ((diagonal-menor (read)))
      (let ((area (/ (* diagonal-mayor diagonal-menor) 2)))
        (format t "Area del rombo: ~a~%" area)))))

(defun calcular-area-perimetro ()
  (mostrar-menu)
  (let ((opcion (leer-opcion)))
    (cond
      ((= opcion 1) (cuadrado))
      ((= opcion 2) (rectangulo))
      ((= opcion 3) (triangulo))
      ((= opcion 4) (circulo))
      ((= opcion 5) (pentagono))
      ((= opcion 6) (hexagono))
      ((= opcion 7) (trapecio))
      ((= opcion 8) (elipse))
      ((= opcion 9) (paralelogramo))
      ((= opcion 10) (rombo))
      (t (format t "Opcion no valida.~%")))))
